apiVersion: apps/v1
kind: Deployment
metadata:
  name: wireguard
  namespace: wireguard
  labels:
    app: wireguard
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: wireguard
  template:
    metadata:
      labels:
        app: wireguard
        app.kubernetes.io/name: wireguard
    spec:
      securityContext:
        runAsUser: 0
        runAsGroup: 0
        fsGroup: 0
        fsGroupChangePolicy: OnRootMismatch
      containers:
        - name: wg-easy
          image: ghcr.io/wg-easy/wg-easy:15
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 51821
              name: http
              protocol: TCP
            - containerPort: 51820
              name: wireguard-udp
              protocol: UDP
          env:
            - name: PORT
              value: "51821"
            - name: HOST
              value: "0.0.0.0"
            - name: INSECURE
              value: "false"
          volumeMounts:
            - name: etc-wireguard
              mountPath: /etc/wireguard
            - name: lib-modules
              mountPath: /lib/modules
              readOnly: true
          resources:
            limits:
              memory: 256Mi
              cpu: 200m
            requests:
              memory: 64Mi
              cpu: 50m
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
                - SYS_MODULE
      volumes:
        - name: etc-wireguard
          persistentVolumeClaim:
            claimName: wireguard-data
        - name: lib-modules
          hostPath:
            path: /lib/modules
            type: Directory
      hostNetwork: false
      dnsPolicy: ClusterFirst
      nodeSelector: {}
      tolerations: []
      affinity: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wireguard-data
  namespace: wireguard
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
  storageClassName: longhorn
